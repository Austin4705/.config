-- Add this to your Lazy Nvim configuration (typically in lua/plugins/jupyter.lua or similar)
return {
  {
    "benlubas/molten-nvim",
    version = "^1.0.0", -- use version <2.0.0 to avoid breaking changes
    dependencies = {
      "3rd/image.nvim", -- Optional but recommended for image support
    },
    build = ":UpdateRemotePlugins",
    -- This is important to ensure the plugin is loaded properly
    lazy = false,
    init = function()
      -- Configure molten.nvim
      vim.g.molten_output_win_max_height = 20
      vim.g.molten_image_provider = "image.nvim" -- or "none" if you don't want images
      vim.g.molten_auto_open_output = false -- Set to true to auto-open output window

      -- Set Python host program if using a virtual environment
      -- vim.g.python3_host_prog = "~/.local/share/nvim/venv/bin/python"
    end,
    keys = {
      {
        "<leader>mi",
        "<cmd>MoltenInit<cr>",
        desc = "Initialize Molten kernel",
      },
      {
        "<leader>me",
        "<cmd>MoltenEvaluateOperator<cr>",
        mode = "n",
        desc = "Evaluate operator (requires motion)",
        expr = false,
      },
      {
        "<leader>mel",
        "<cmd>MoltenEvaluateOperator<cr>ip",
        mode = "n",
        desc = "Evaluate paragraph",
      },
      {
        "<leader>ml",
        "<cmd>MoltenEvaluateLine<cr>",
        desc = "Evaluate line",
      },
      {
        "<leader>mr",
        "<cmd>MoltenReevaluateCell<cr>",
        desc = "Re-evaluate cell",
      },
      {
        "<leader>md",
        "<cmd>MoltenDelete<cr>",
        desc = "Delete cell",
      },
      {
        "<leader>mo",
        "<cmd>noautocmd MoltenEnterOutput<cr>",
        desc = "Enter output window",
      },
    },
  },

  -- Only if you want image support (recommended)
  {
    "3rd/image.nvim",
    opts = {
      backend = "kitty", -- or "ueberzug" or other supported backend
      max_width = 100,
      max_height = 20,
      max_height_window_percentage = 50,
      max_width_window_percentage = 50,
      window_overlap_clear_enabled = true,
    },
  },
  {
    "GCBallesteros/jupytext.nvim",
    lazy = false, -- Important: Don't lazy load this plugin
    config = function()
      require("jupytext").setup({
        style = "markdown",
        output_extension = "md",
        force_ft = "markdown",
      })
    end,
  },
  {
    "GCBallesteros/NotebookNavigator.nvim",
    keys = {
      -- Navigate between cells
      {
        "]h",
        function()
          require("notebook-navigator").move_cell("d")
        end,
        desc = "Move to next cell",
      },
      {
        "[h",
        function()
          require("notebook-navigator").move_cell("u")
        end,
        desc = "Move to previous cell",
      },

      -- Execute cells
      {
        "<leader>nx",
        function()
          require("notebook-navigator").run_cell()
        end,
        desc = "Run current cell",
      },
      {
        "<leader>nX",
        function()
          require("notebook-navigator").run_and_move()
        end,
        desc = "Run cell and move to next",
      },
      {
        "<leader>na",
        function()
          require("notebook-navigator").run_all_cells()
        end,
        desc = "Run all cells",
      },
      {
        "<leader>nA",
        function()
          require("notebook-navigator").run_all_cells_above()
        end,
        desc = "Run all cells above",
      },
      {
        "<leader>nB",
        function()
          require("notebook-navigator").run_all_cells_below()
        end,
        desc = "Run all cells below",
      },
    },
    dependencies = {
      "echasnovski/mini.comment", -- For commenting functionality
      -- REPL provider (choose one):
      "benlubas/molten-nvim", -- We'll use molten-nvim as our REPL provider
      -- "hkupty/iron.nvim",      -- Alternative REPL provider
      -- "akinsho/toggleterm.nvim", -- Another alternative REPL provider

      -- Optional but recommended:
      "anuvyklack/hydra.nvim", -- For the cell execution hydra interface
    },
    config = function()
      local nn = require("notebook-navigator")
      local Hydra = require("hydra")

      -- Ensure Molten is initialized
      vim.cmd("MoltenInit")

      -- Create a custom Hydra for notebook navigation
      local hydra = Hydra({
        name = "Notebook Navigator",
        mode = "n",
        body = "<leader>h",
        hint = [[
 ^ ^              Notebook Navigator
 ^
 _x_: Run Cell    _s_: Split Cell  _j_: Next Cell     _q_: Exit
 _X_: Run & Move  _m_: Merge Cell  _k_: Previous Cell _i_: Insert Cell
 _a_: Run All     _d_: Delete Cell
 ^
]],
        config = {
          color = "pink",
          invoke_on_body = true,
          hint = {
            position = "bottom",
            border = "rounded",
          },
        },
        heads = {
          {
            "x",
            function()
              nn.run_cell()
            end,
            { desc = "Run Cell" },
          },
          {
            "X",
            function()
              nn.run_and_move()
            end,
            { desc = "Run & Move" },
          },
          {
            "a",
            function()
              nn.run_all_cells()
            end,
            { desc = "Run All" },
          },
          {
            "j",
            function()
              nn.move_cell("d")
            end,
            { desc = "Next Cell" },
          },
          {
            "k",
            function()
              nn.move_cell("u")
            end,
            { desc = "Previous Cell" },
          },
          {
            "i",
            function()
              local current_line = vim.api.nvim_win_get_cursor(0)[1]
              local lines = {
                "```python",
                "",
                "```",
              }
              vim.api.nvim_buf_set_lines(0, current_line, current_line, false, lines)
              vim.api.nvim_win_set_cursor(0, { current_line + 1, 0 })
            end,
            { desc = "Insert Cell" },
          },
          {
            "s",
            function()
              nn.split_cell()
            end,
            { desc = "Split Cell" },
          },
          {
            "m",
            function()
              nn.merge_cell()
            end,
            { desc = "Merge Cell" },
          },
          {
            "d",
            function()
              nn.delete_cell()
            end,
            { desc = "Delete Cell" },
          },
          { "q", nil, { exit = true, desc = "Exit" } },
        },
      })

      nn.setup({
        -- Code cell marker configuration for markdown
        cell_markers = {
          markdown = "```python",
          python = "```python",
        },

        -- Use molten-nvim as the REPL provider
        repl_provider = "molten",

        -- Highlight cell separators
        syntax_highlight = true,

        -- Custom cell execution function
        execute_cell = function()
          -- Check if Molten is initialized
          if vim.fn.exists(":MoltenEvaluateOperator") == 2 then
            vim.cmd("MoltenEvaluateOperator")
          else
            vim.notify("Molten is not initialized. Please run :MoltenInit first", vim.log.levels.ERROR)
          end
        end,
      })
    end,
  },
}
