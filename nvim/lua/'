-- ~/.config/nvim/lua/plugins/notebook.lua

return {
  -- Prerequisites:
  -- 1. Python 3 with pip and virtualenv
  --    Run: pip install pynvim jupytext jupyter_client ipykernel
  -- 2. Kitty terminal (for image display)
  -- 3. imagemagick (for Kitty image display with molten)
  --    Run: sudo apt install imagemagick (or equivalent for your OS)
  -- 4. ueberzug (optional, as a fallback or alternative image viewer if not using Kitty)
  --    Run: pip install ueberzug

  -- Essential dependency for many plugins
  {
    "nvim-lua/plenary.nvim",
    lazy = true,
  },

  -- Molten-nvim: For running Jupyter cells and displaying results
  {
    "benlubas/molten-nvim",
    dependencies = { "nvim-lua/plenary.nvim" },
    ft = { "python", "markdown" }, -- Lazy load on python or markdown files
    build = ":UpdateRemotePlugins", -- Needed if you haven't run it before for pynvim
    opts = {
      -- Basic configuration
      default_kernel = "python3", -- Kernel to use
      output_panel = {
        enabled = true, -- Show an output panel for text results
        type = "popup", -- "popup", "split", or "kitty" (for text output in a new kitty window)
      },

      -- Image display configuration
      image_provider = "kitty", -- Use "kitty", "ueberzug", or "chafa"
      show_image_in_popup = true, -- For kitty and ueberzug, displays image in a floating window
      kitty_font_size_adjustment = 0, -- Adjust if kitty image font size is off

      -- Virtual environment settings
      venv_path = ".venv", -- Path to virtual environment (relative to project root or absolute)
      -- auto_create_venv = true, -- Automatically create venv if it doesn't exist (experimental)

      -- Other useful settings
      -- notify_on_job_finish = true, -- Neovim notification when a cell finishes running
      -- cell_highlight_current = "MoltenCellCurrent", -- Highlight group for the current cell
      -- cell_highlight_executed = "MoltenCellExecuted", -- Highlight group for executed cells
    },
    config = function(_, opts)
      require("molten").setup(opts)

      -- Example Keymaps for Molten
      -- It's recommended to use a plugin like which-key.nvim for better keymap management
      vim.api.nvim_set_keymap(
        "n",
        "<leader>mr",
        "<cmd>MoltenRunCell<CR>",
        { noremap = true, silent = true, desc = "Molten: Run Cell" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>mR",
        "<cmd>MoltenRunCellAndAdvance<CR>",
        { noremap = true, silent = true, desc = "Molten: Run Cell & Advance" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>ma",
        "<cmd>MoltenRunAll<CR>",
        { noremap = true, silent = true, desc = "Molten: Run All Cells" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>mb",
        "<cmd>MoltenRunBelow<CR>",
        { noremap = true, silent = true, desc = "Molten: Run Cells Below" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>mo",
        "<cmd>MoltenReRunCell<CR>",
        { noremap = true, silent = true, desc = "Molten: Re-run Cell" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>mc",
        "<cmd>MoltenClearOutput<CR>",
        { noremap = true, silent = true, desc = "Molten: Clear Cell Output" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>md",
        "<cmd>MoltenDeleteCell<CR>",
        { noremap = true, silent = true, desc = "Molten: Delete Cell (if supported by navigator)" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>mi",
        "<cmd>MoltenInit<CR>",
        { noremap = true, silent = true, desc = "Molten: Initialize Kernel" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>ms",
        "<cmd>MoltenSelectKernel<CR>",
        { noremap = true, silent = true, desc = "Molten: Select Kernel" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>mx",
        "<cmd>MoltenStopKernel<CR>",
        { noremap = true, silent = true, desc = "Molten: Stop/Interrupt Kernel" }
      )

      -- Visual mode mapping to run selected code
      vim.api.nvim_set_keymap(
        "v",
        "<leader>mr",
        "<cmd>MoltenRunSelected<CR>",
        { noremap = true, silent = true, desc = "Molten: Run Selected" }
      )

      -- You might want to initialize molten for specific filetypes automatically
      vim.api.nvim_create_autocmd("FileType", {
        pattern = "python",
        callback = function()
          -- You can call MoltenInit here if you want to auto-start a kernel
          -- vim.cmd("MoltenInit")
          -- Or set up local keymaps
        end,
      })
    end,
  },

  -- Jupytext.nvim: For converting between .ipynb and text formats (.py, .md)
  {
    "gcavallanti/jupytext.nvim",
    ft = { "python", "markdown" }, -- Lazy load on relevant filetypes
    dependencies = { "nvim-lua/plenary.nvim" },
    opts = {
      -- Default format to use when not specified or when auto-detecting.
      -- "auto" tries to guess, "py:percent" is common for Python.
      jupytext_fmt = "py:percent",
      -- Or, specify per filetype:
      -- jupytext_filetype_map = {
      --   python = "py:percent", -- Use "# %%" cell markers
      --   markdown = "md",
      -- },
      jupytext_executable = "jupytext", -- Command or path to jupytext CLI
      jupytext_sync_on_save = true, -- Sync .ipynb when saving the text file
      jupytext_sync_on_change = false, -- Sync on every change (can be too frequent)
      -- jupytext_read_notebook_metadata = true, -- Read metadata from the notebook
      -- jupytext_write_notebook_metadata = true, -- Write metadata to the notebook
      -- jupytext_stop_sync_on_error = false,
    },
    config = function(_, opts)
      require("jupytext").setup(opts)

      -- Example Keymaps for Jupytext
      vim.api.nvim_set_keymap(
        "n",
        "<leader>js",
        "<cmd>JupytextSync<CR>",
        { noremap = true, silent = true, desc = "Jupytext: Sync with .ipynb" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "<leader>jt",
        "<cmd>JupytextToggleAutoSync<CR>",
        { noremap = true, silent = true, desc = "Jupytext: Toggle Auto Sync" }
      )
      -- Add more keymaps for other Jupytext commands if needed
      -- e.g., JupytextToNotebook, JupytextToFormat, etc.
    end,
  },

  -- Notebook-navigator.nvim: For cell navigation and management
  {
    "GCBallesteros/notebook-navigator.nvim",
    dependencies = { "nvim-lua/plenary.nvim", "nvim-treesitter/nvim-treesitter" },
    ft = { "python", "markdown" }, -- Lazy load on relevant filetypes
    opts = {
      -- debug = false,
      -- Query to find the next/previous cell using Treesitter.
      -- These are defaults and usually work well with standard Python cell markers.
      -- query_next = "@cell.outer",
      -- query_prev = "@cell.outer",
      cell_markers = { -- Define cell markers for different filetypes
        python = { "# %%", "#%%", "# <codecell>", "# In[d*]:" },
        markdown = { "```python" }, -- Example for markdown code blocks
        -- Add other filetypes and their cell markers if needed
      },
      ft_to_parser = { -- Filetype to Treesitter parser name
        python = "python",
        markdown = "markdown", -- Ensure you have markdown TS parser for this
      },
      ensure_treesitter = { "python", "markdown" }, -- Ensure these parsers are installed
    },
    config = function(_, opts)
      require("notebook-navigator").setup(opts)

      -- Example Keymaps for Notebook Navigator
      -- These often conflict with other plugins, so choose keys carefully or use which-key.nvim
      -- Cell navigation
      vim.api.nvim_set_keymap(
        "n",
        "]c",
        "<cmd>NotebookNavigatorCellNext<CR>",
        { noremap = true, silent = true, desc = "Notebook: Next Cell" }
      )
      vim.api.nvim_set_keymap(
        "n",
        "[c",
        "<cmd>NotebookNavigatorCellPrevious<CR>",
        { noremap = true, silent = true, desc = "Notebook: Previous Cell" }
      )

      -- Cell manipulation (these might be better handled by molten or your own functions)
      -- vim.api.nvim_set_keymap("n", "<leader>nc", "<cmd>NotebookNavigatorCellCreateBelow<CR>", { noremap = true, silent = true, desc = "Notebook: Create Cell Below" })
      -- vim.api.nvim_set_keymap("n", "<leader>nC", "<cmd>NotebookNavigatorCellCreateAbove<CR>", { noremap = true, silent = true, desc = "Notebook: Create Cell Above" })
      -- vim.api.nvim_set_keymap("n", "<leader>nd", "<cmd>NotebookNavigatorCellDelete<CR>", { noremap = true, silent = true, desc = "Notebook: Delete Cell" })

      -- Select cell
      vim.api.nvim_set_keymap(
        "x",
        "ic",
        "<cmd>NotebookNavigatorCellSelect<CR>",
        { noremap = true, silent = true, desc = "Notebook: Select Cell (inner)" }
      )
      vim.api.nvim_set_keymap(
        "x",
        "ac",
        "<cmd>NotebookNavigatorCellSelectOuter<CR>",
        { noremap = true, silent = true, desc = "Notebook: Select Cell (outer)" }
      )
      vim.api.nvim_set_keymap(
        "o",
        "ic",
        ":<c-u>NotebookNavigatorCellSelect<CR>",
        { noremap = true, silent = true, desc = "Notebook: Select Cell (inner)" }
      )
      vim.api.nvim_set_keymap(
        "o",
        "ac",
        ":<c-u>NotebookNavigatorCellSelectOuter<CR>",
        { noremap = true, silent = true, desc = "Notebook: Select Cell (outer)" }
      )
    end,
  },

  -- Optional: which-key.nvim for better keymap discoverability
  {
    "folke/which-key.nvim",
    event = "VeryLazy",
    opts = {
      -- your which-key config
    },
    config = function(_, opts)
      vim.o.timeout = true
      vim.o.timeoutlen = 300
      require("which-key").setup(opts)
    end,
  },
}
